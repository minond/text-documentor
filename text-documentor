#!/usr/bin/env node
// vi:syntax=javascript

'use strict';

var fs = require('fs'),
    dox = require('dox'),
    join = require('path').join;

var find = require('lodash-node/modern/collections/find'),
    where = require('lodash-node/modern/collections/where'),
    map = require('lodash-node/modern/collections/map'),
    curry = require('lodash-node/modern/functions/curry'),
    merge = require('lodash-node/modern/objects/merge'),
    template = require('lodash-node/modern/utilities/template');

/**
 * @function tag
 * @param {String} type tag type
 * @param {Object} doc single index from dox.parseComments
 * @return {*}
 */
function tag(type, doc) {
    return (find(doc.tags, { type: type }) || {}).string;
}

/**
 * @function tags
 * @param {String} type tag type
 * @param {Object} doc single index from dox.parseComments
 * @return {Array}
 */
function tags(type, doc) {
    return where(doc.tags, { type: type });
}

/**
 * documents a file
 * @function document_class
 * @param {String} file
 * @param {String} tmpl template
 * @return {String} makedown representation of yuidoc documentations
 */
function document_class(file, tmpl) {
    var comments = dox.parseComments(fs.readFileSync(file).toString()),
        base = find(comments, { isConstructor: true }) || {},
        methods = where(comments, curry(tag)('method'));

    return !methods.length ? '' : template(tmpl, {
        base: get_tag_data(base),
        methods: map(methods, get_tag_data)
    });
}

/**
 * @funciton get_tag_data
 * @parma {Object} data
 * @return {Object}
 */
function get_tag_data(data) {
    // this is what an object looks like:
    // { tags:
    //    [ { type: 'link',
    //        string: 'https://developer.github.com/v3/users/' },
    //      { type: 'method', string: 'followers' },
    //      { type: 'param',
    //        types: [Object],
    //        name: '[identifier]',
    //        description: '',
    //        optional: true },
    //      { type: 'return', types: [Object], description: '' } ],
    //   description: { full: '', summary: '', body: '' },
    //   isPrivate: false,
    //   isConstructor: false,
    //   isEvent: false,
    //   ignore: false,
    //   line: 29,
    //   codeStart: 35,
    //   code: 'followers: aping.https(URL_FOLLOWERS, [\'identifier\'])\n});',
    //   ctx:
    //    { type: 'property',
    //      constructor: undefined,
    //      cons: undefined,
    //      name: 'followers',
    //      value: 'aping.https(URL_FOLLOWERS, [\'identifier\'])',
    //      string: 'followers' } }
    return merge(data, {
        name: tag('class', data) || tag('method', data),
        link: tag('link', data),
        params: tags('param', data),
        description: merge(data.description, {
            clean: data.description && data.description.summary &&
                data.description.summary
                    .replace(/\<br \/\>/g, ' ')
                    .replace(/\<\/p\>/g, ' ')
                    .replace(/\<p\>/g, ' ')
                    .replace(/^\s+|\s+$/g, '')
        })
    });
}

/**
 * @function make_doc
 * @param {String} source file
 * @param {String} tmpl_str
 */
function make_doc(source, tmpl_str) {
    if (fs.statSync(source).isFile()) {
        console.log(document_class(source, tmpl_str));
    } else if (fs.statSync(source).isDirectory()) {
        fs.readdirSync(source).forEach(function (file) {
            make_doc(join(source, file), tmpl_str);
        });
    }
}

if (!module.parent) {
    var argv = require('minimist')(process.argv.slice(2)),
        sources = argv._,
        tmpl_default = join(__dirname, 'templates', '/simple.md'),
        tmpl_file = argv.t || argv.template || tmpl_default,
        tmpl_str = fs.readFileSync(tmpl_file).toString();

    if (argv.h || argv.help) {
        console.log('Usage: text-documentor [FILE1 [FILE2 [...]]]')
        console.log('');
        console.log(' options:');
        console.log('   - t|template      # template file');

        process.exit(0);
    }

    sources.forEach(function (source) {
        make_doc(source, tmpl_str);
    });
}

module.exports = document_class;
